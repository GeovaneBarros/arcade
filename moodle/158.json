{
  "name": "@158 #03_rep L3 - Trilhas - OBI 2005\n",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@158 #03_rep L3 - Trilhas - OBI 2005</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"rep-l3---trilhas---obi-2005\"><span class=\"citation\" data-cites=\"158\">@158</span> #03_rep L3 - Trilhas - OBI 2005</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<p><img src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/158/__capa.jpg\" /></p>\n<h2 id=\"motiva\u00e7\u00e3o\">Motiva\u00e7\u00e3o</h2>\n<p>Nos finais de semana Paulo faz longas caminhadas pelas bonitas trilhas que atravessam as matas<br />\nvizinhas a\u0300 sua cidade. Recentemente Paulo adquiriu um aparelho de GPS (siglas do ingle\u0302s Sistema<br />\nde Posicionamento Global) e com ele mapeou as mais belas trilhas da regia\u0303o. Paulo programou o<br />\nGPS para armazenar, a intervalos regulares, a altitude do ponto corrente durante o trajeto. Assim,<br />\napo\u0301s percorrer as trilhas com o seu GPS, Paulo tem informac\u0327o\u0303es que permitem por exemplo produzir<br />\ngra\u0301ficos como os abaixo:</p>\n<p>Paulo tem uma nova namorada, e quer convence\u0302-la a passear junto com ele pelas trilhas. Para o<br />\nprimeiro passeio juntos, Paulo quer escolher uma trilha \u201cfa\u0301cil\u201d. Segundo o seu crite\u0301rio, a trilha mais<br />\nfa\u0301cil e\u0301 a que, em um dos sentidos do percurso, exige o menor esforc\u0327o de subida. O esforc\u0327o exigido em<br />\num trecho de subida e\u0301 proporcional ao desn\u0131\u0301vel do trecho.</p>\n<h2 id=\"a\u00e7\u00e3o\">A\u00e7\u00e3o</h2>\n<p>Dadas as informac\u0327o\u0303es colhidas por Paulo sobre dista\u0302ncias e altitudes de um conjunto de trilhas, voce\u0302<br />\ndeve escrever um programa que determine qual e\u0301 a trilha que exige o menor esforc\u0327o de subida.</p>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A primeira linha da entrada conte\u0301m um nu\u0301mero inteiro N que indica o nu\u0301mero de trilhas. Cada uma das N linhas seguintes conte\u0301m a descric\u0327a\u0303o de uma trilha (1 \u2264 N \u2264 100). As trilhas sa\u0303o identificadas por nu\u0301meros de 1 a N . A ordem em que as trilhas aparecem na entrada determina os seus identificadores (a primeira trilha e\u0301 a de nu\u0301mero 1, a segunda a de nu\u0301mero 2, a u\u0301ltima a de nu\u0301mero N ). A descric\u0327a\u0303o de uma trilha inicia com um nu\u0301mero inteiro M que indica a quantidade de pontos de medic\u0327a\u0303o da trilha (2 \u2264 M \u2264 1000), seguido de M nu\u0301meros inteiros Hi representando a altura dos pontos da trilha (medidos a intervalos regulares e iguais para todas as linhas). Paulo pode percorrer a trilha em qualquer sentido (ou seja, partindo do ponto de altitude H1 em direc\u0327a\u0303o ao ponto de altitude HM , ou partindo do ponto de altitude HM em direc\u0327a\u0303o ao ponto de altitude H1 ). A entrada deve ser lida do dispositivo de entrada padra\u0303o (normalmente o teclado).</li>\n</ul>\n<h3 id=\"sa\u00edda\">Sa\u00edda</h3>\n<ul>\n<li>Seu programa deve produzir uma u\u0301nica linha na sa\u0131\u0301da, contendo um nu\u0301mero inteiro representando o<br />\nidentificador da melhor trilha, conforme determinado pelo seu programa. Em caso de empate entre<br />\nduas ou mais trilhas, imprima a de menor identificador.<br />\nA sa\u0131\u0301da deve ser escrita no dispositivo de sa\u0131\u0301da padra\u0303o (normalmente a tela).</li>\n</ul>\n<p>\fOlimp\u0131\u0301ada Brasileira de Informa\u0301tica - OBI2005 - Modalidade Programac\u0327a\u0303o N\u0131\u0301vel 1</p>\n<h2 id=\"restri\u00e7\u00f5es\">Restri\u00e7\u00f5es</h2>\n<p>1 \u2264 N \u2264 100<br />\n2 \u2264 M \u2264 1000<br />\n0 \u2264 Hi \u2264 1000</p>\n<h2 id=\"exemplos\">Exemplos</h2>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 01\n5\n10 60 60 70 70 70 70 80 90 90 100\n4 498 500 498 498\n5 200 190 180 170 160\n2 1000 900\n4 20 20 20 20\n========\n5\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code></pre>\n<h1 id=\"section\"></h1>\n<!---\n>>>>>>>> 02\n10\n42 51 94 74 39 85 62 89 37 5 11 96 2 4 64 3 87 13 22 93 35 70 10 22 23 53 48 89 67 72 74 16 25 96 94 78 41 61 25 73 51 42 28\n73 99 50 26 74 83 37 62 22 12 87 32 48 12 62 62 30 21 61 56 66 6 50 53 53 50 0 10 14 73 64 14 55 27 13 82 19 46 0 28 55 7 95 76 75 54 63 40 65 25 26 73 10 25 74 70 39 91 38 84 31 25 94 36 0 57 39 48 98 58 62 62 33 18\n89 108 110 106 102 104 100 107 108 102 101 101 102 100 109 100 106 104 106 104 102 108 105 106 102 106 106 108 106 102 108 109 106 103 106 102 105 109 105 100 105 106 110 109 103 101 103 103 103 107 104 105 100 107 107 108 101 105 100 107 103 109 110 110 101 100 103 101 101 103 107 109 105 103 103 104 107 109 102 110 110 100 110 107 104 105 108 105 100 102\n82 75 41 53 79 60 7 50 87 63 3 24 81 64 24 86 42 38 87 92 89 79 3 36 0 92 69 18 70 44 77 76 33 32 6 62 29 94 41 2 32 8 3 1 46 20 39 66 73 97 27 21 80 53 87 41 57 28 99 38 72 6 44 1 70 44 71 48 22 73 61 47 78 4 43 33 58 23 53 64 42 92 41\n25 58 17 80 80 41 34 100 64 63 60 9 25 43 25 57 18 50 36 75 37 38 2 43 31 28\n67 96 94 92 94 97 92 93 98 99 97 94 92 92 92 96 95 92 92 92 100 90 94 92 95 91 98 99 91 96 92 98 97 98 91 99 94 98 92 98 90 97 97 92 99 98 96 92 99 98 90 96 94 93 92 100 92 93 93 95 100 92 96 94 90 96 99 96\n15 103 108 102 104 100 102 102 106 109 101 101 110 107 103 105\n96 53 100 44 58 2 76 77 41 52 52 14 41 49 0 59 32 99 61 10 14 5 98 7 46 79 15 65 17 87 63 25 65 74 95 64 82 4 4 31 34 89 57 11 87 10 9 96 52 81 15 41 30 48 18 56 37 75 30 85 60 43 85 92 56 65 67 42 65 0 2 65 38 28 41 95 21 57 37 21 58 56 73 13 57 86 74 14 72 71 45 63 75 9 43 93 83\n14 93 98 100 92 91 99 94 99 100 93 91 99 90 93\n84 42 83 15 64 30 26 53 31 5 85 85 54 0 16 33 43 85 49 77 81 7 74 12 13 11 27 78 85 29 37 28 43 35 38 88 95 49 32 15 86 32 81 63 97 39 22 5 86 96 22 33 1 18 52 91 44 40 95 45 7 69 86 28 78 51 38 16 6 55 10 53 87 16 40 35 37 40 51 72 31 0 92 50 71\n========\n7\n<<<<<<<<\n\n>>>>>>>> 03\n10\n45 18 31 80 64 32 17 18 27 36 1 53 80 84 51 43 47 98 36 41 51 92 30 23 75 77 39 62 33 10 91 6 100 85 70 14 99 71 89 7 27 37 56 24 100 34\n60 6 25 5 94 84 9 23 28 7 83 14 89 78 25 45 88 56 74 15 87 21 75 45 93 71 19 91 19 2 35 23 51 38 39 84 51 13 38 11 85 22 100 95 30 93 93 63 27 63 15 42 17 24 59 5 28 13 67 71 94\n88 100 110 106 108 106 107 105 101 105 104 105 106 107 100 102 100 107 100 101 100 106 106 101 107 108 106 107 107 110 105 103 101 107 108 103 109 100 109 105 104 106 101 104 101 107 109 107 105 105 105 101 102 106 108 103 100 103 103 102 108 107 110 101 101 106 105 105 100 109 109 104 109 105 101 102 107 106 102 105 101 104 105 103 100 107 103 105 104\n67 104 109 104 100 105 106 104 102 105 109 104 110 102 108 102 100 109 108 102 105 110 100 107 109 108 106 103 102 102 107 101 104 102 109 110 100 103 108 109 101 105 104 101 110 100 101 103 107 102 104 108 108 106 104 106 107 101 107 105 105 100 105 100 109 106 104 101\n59 102 110 101 101 102 102 107 101 110 105 109 107 100 100 102 103 100 101 105 102 109 103 108 106 110 103 108 104 105 102 110 110 106 107 109 105 103 106 107 107 100 105 107 106 106 102 100 103 109 106 108 103 107 102 106 101 102 106 109\n99 31 40 36 65 81 62 91 98 31 10 0 58 72 31 43 28 3 7 36 81 99 69 56 82 75 94 26 93 31 99 79 28 100 59 13 22 46 7 92 35 69 62 28 28 96 15 40 40 64 20 48 4 38 75 65 34 83 33 28 47 33 7 74 26 64 35 38 2 56 32 51 91 57 23 66 58 72 32 55 37 37 27 50 52 94 76 50 47 19 84 10 52 30 10 5 95 22 64 83\n34 92 94 99 97 95 96 91 90 91 96 94 91 92 91 92 98 91 90 94 100 96 95 92 90 93 95 99 90 94 90 95 93 92 94\n27 71 85 60 32 10 97 49 14 10 8 69 84 81 35 55 73 80 22 18 20 19 86 78 61 27 80 52\n54 91 94 94 92 99 100 97 96 96 100 96 91 99 97 94 91 94 99 96 95 93 100 96 98 95 98 95 94 95 91 100 97 98 96 98 100 98 99 96 100 95 92 97 95 99 90 96 90 94 96 96 96 93 96\n82 100 103 109 100 103 104 106 108 102 101 105 108 109 104 103 101 107 110 103 110 109 106 103 108 110 106 107 109 106 110 109 105 107 109 103 109 109 103 106 106 100 108 107 104 110 110 108 101 104 110 110 107 107 107 103 106 102 109 103 103 105 108 106 104 100 104 109 100 108 101 102 104 106 103 106 107 107 110 103 105 108 106\n========\n7\n<<<<<<<<\n--->\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=01\ninput=5\n10 60 60 70 70 70 70 80 90 90 100\n4 498 500 498 498\n5 200 190 180 170 160\n2 1000 900\n4 20 20 20 20\noutput=\"5\n\"\ngrade reduction=100%\n\n\ncase=02\ninput=10\n42 51 94 74 39 85 62 89 37 5 11 96 2 4 64 3 87 13 22 93 35 70 10 22 23 53 48 89 67 72 74 16 25 96 94 78 41 61 25 73 51 42 28\n73 99 50 26 74 83 37 62 22 12 87 32 48 12 62 62 30 21 61 56 66 6 50 53 53 50 0 10 14 73 64 14 55 27 13 82 19 46 0 28 55 7 95 76 75 54 63 40 65 25 26 73 10 25 74 70 39 91 38 84 31 25 94 36 0 57 39 48 98 58 62 62 33 18\n89 108 110 106 102 104 100 107 108 102 101 101 102 100 109 100 106 104 106 104 102 108 105 106 102 106 106 108 106 102 108 109 106 103 106 102 105 109 105 100 105 106 110 109 103 101 103 103 103 107 104 105 100 107 107 108 101 105 100 107 103 109 110 110 101 100 103 101 101 103 107 109 105 103 103 104 107 109 102 110 110 100 110 107 104 105 108 105 100 102\n82 75 41 53 79 60 7 50 87 63 3 24 81 64 24 86 42 38 87 92 89 79 3 36 0 92 69 18 70 44 77 76 33 32 6 62 29 94 41 2 32 8 3 1 46 20 39 66 73 97 27 21 80 53 87 41 57 28 99 38 72 6 44 1 70 44 71 48 22 73 61 47 78 4 43 33 58 23 53 64 42 92 41\n25 58 17 80 80 41 34 100 64 63 60 9 25 43 25 57 18 50 36 75 37 38 2 43 31 28\n67 96 94 92 94 97 92 93 98 99 97 94 92 92 92 96 95 92 92 92 100 90 94 92 95 91 98 99 91 96 92 98 97 98 91 99 94 98 92 98 90 97 97 92 99 98 96 92 99 98 90 96 94 93 92 100 92 93 93 95 100 92 96 94 90 96 99 96\n15 103 108 102 104 100 102 102 106 109 101 101 110 107 103 105\n96 53 100 44 58 2 76 77 41 52 52 14 41 49 0 59 32 99 61 10 14 5 98 7 46 79 15 65 17 87 63 25 65 74 95 64 82 4 4 31 34 89 57 11 87 10 9 96 52 81 15 41 30 48 18 56 37 75 30 85 60 43 85 92 56 65 67 42 65 0 2 65 38 28 41 95 21 57 37 21 58 56 73 13 57 86 74 14 72 71 45 63 75 9 43 93 83\n14 93 98 100 92 91 99 94 99 100 93 91 99 90 93\n84 42 83 15 64 30 26 53 31 5 85 85 54 0 16 33 43 85 49 77 81 7 74 12 13 11 27 78 85 29 37 28 43 35 38 88 95 49 32 15 86 32 81 63 97 39 22 5 86 96 22 33 1 18 52 91 44 40 95 45 7 69 86 28 78 51 38 16 6 55 10 53 87 16 40 35 37 40 51 72 31 0 92 50 71\noutput=\"7\n\"\ngrade reduction=100%\n\n\ncase=03\ninput=10\n45 18 31 80 64 32 17 18 27 36 1 53 80 84 51 43 47 98 36 41 51 92 30 23 75 77 39 62 33 10 91 6 100 85 70 14 99 71 89 7 27 37 56 24 100 34\n60 6 25 5 94 84 9 23 28 7 83 14 89 78 25 45 88 56 74 15 87 21 75 45 93 71 19 91 19 2 35 23 51 38 39 84 51 13 38 11 85 22 100 95 30 93 93 63 27 63 15 42 17 24 59 5 28 13 67 71 94\n88 100 110 106 108 106 107 105 101 105 104 105 106 107 100 102 100 107 100 101 100 106 106 101 107 108 106 107 107 110 105 103 101 107 108 103 109 100 109 105 104 106 101 104 101 107 109 107 105 105 105 101 102 106 108 103 100 103 103 102 108 107 110 101 101 106 105 105 100 109 109 104 109 105 101 102 107 106 102 105 101 104 105 103 100 107 103 105 104\n67 104 109 104 100 105 106 104 102 105 109 104 110 102 108 102 100 109 108 102 105 110 100 107 109 108 106 103 102 102 107 101 104 102 109 110 100 103 108 109 101 105 104 101 110 100 101 103 107 102 104 108 108 106 104 106 107 101 107 105 105 100 105 100 109 106 104 101\n59 102 110 101 101 102 102 107 101 110 105 109 107 100 100 102 103 100 101 105 102 109 103 108 106 110 103 108 104 105 102 110 110 106 107 109 105 103 106 107 107 100 105 107 106 106 102 100 103 109 106 108 103 107 102 106 101 102 106 109\n99 31 40 36 65 81 62 91 98 31 10 0 58 72 31 43 28 3 7 36 81 99 69 56 82 75 94 26 93 31 99 79 28 100 59 13 22 46 7 92 35 69 62 28 28 96 15 40 40 64 20 48 4 38 75 65 34 83 33 28 47 33 7 74 26 64 35 38 2 56 32 51 91 57 23 66 58 72 32 55 37 37 27 50 52 94 76 50 47 19 84 10 52 30 10 5 95 22 64 83\n34 92 94 99 97 95 96 91 90 91 96 94 91 92 91 92 98 91 90 94 100 96 95 92 90 93 95 99 90 94 90 95 93 92 94\n27 71 85 60 32 10 97 49 14 10 8 69 84 81 35 55 73 80 22 18 20 19 86 78 61 27 80 52\n54 91 94 94 92 99 100 97 96 96 100 96 91 99 97 94 91 94 99 96 95 93 100 96 98 95 98 95 94 95 91 100 97 98 96 98 100 98 99 96 100 95 92 97 95 99 90 96 90 94 96 96 96 93 96\n82 100 103 109 100 103 104 106 108 102 101 105 108 109 104 103 101 107 110 103 110 109 106 103 108 110 106 107 109 106 110 109 105 107 109 103 109 109 103 106 106 100 108 107 104 110 110 108 101 104 110 110 107 107 107 103 106 102 109 103 103 105 108 106 104 100 104 109 100 108 101 102 104 106 103 106 107 107 110 103 105 108 106\noutput=\"7\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "solver.c.txt",
      "contents": "#include <stdio.h>\nint main(){\n    int nTrilhas = 0;\n    scanf(\"%d\", &nTrilhas);\n    int melhor = 0;\n    int oudContador = 99999;\n    for(int i = 1; i <= nTrilhas; i++){\n        int contador = 0;\n        int oudPonto = 0;\n        int tanTrilha = 0;\n        int ponto = 0;\n        scanf(\"%d\", &tanTrilha);\n        for(int x = 0; x < tanTrilha; x++){\n            scanf(\"%d\", &ponto);\n            if(x == 0){\n                oudPonto = ponto;\n            }else{\n                if(ponto != oudPonto){\n                    if(ponto > oudPonto){\n                        int aux = 0;\n                        aux = ponto - oudPonto;\n                        oudPonto = ponto;\n                        contador += aux;\n                    }else if(ponto < oudPonto){\n                        int aux = 0;\n                        aux = oudPonto - ponto;\n                        oudPonto = ponto;\n                        contador += aux;\n                    }else if(ponto == oudPonto){\n                        oudPonto = ponto;\n                    }\n                }\n            }\n        }\n        if(i == 1){\n            oudContador = contador;\n            melhor = i;\n\n        }\n        if(contador < oudContador){\n            oudContador = contador;\n            melhor = i;\n        }\n    }\n    printf(\"%d\\n\", melhor);\n}"
    }
  ],
  "requiredFile": null
}