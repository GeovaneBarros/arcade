{
  "title": "@147 #10_ptr L1 - Duelo",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@147 #10_ptr L1 - Duelo</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"ptr-l1---duelo\">#10_ptr L1 - Duelo</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<p><img src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/147/__capa.jpg\" /></p>\n<h2 id=\"motiva\u00e7\u00e3o\">Motiva\u00e7\u00e3o</h2>\n<p>Considere o seguinte formato de dicion\u00e1rio que deve ser usada em seu programa:</p>\n<p>personagem = {\u201cVida: ***,\u201dAtaque\": ***}</p>\n<p>Usando a defini\u00e7\u00e3o acima, crie um programa que leia os dados\u00a0(vida e ataque) de dois personagens, representados por um dicion\u00e1rio do tipo mostrado acima, e implemente a fun\u00e7\u00e3o duelo:</p>\n<p>A fun\u00e7\u00e3o duelo recebe como entrada dois dicion\u00e1rios, onde cada um deles representa um personagem. Ela deve imprimir \u201cPersonagem 1\u201d se o primeiro personagem venceu o duelo, \u201cPersonagem 2\u201d se o segundo personagem venceu o duelo e \u201cEmpate\u201d caso nenhum deles tenha vencido o duelo. O duelo consiste em uma sequ\u00eancia de rodadas onde em cada rodada o primeiro personagem ataca o segundo (tira-se da vida do 2o personagem o valor do ataque do 1o personagem) e o segundo ataca o primeiro\u00a0(tira-se da vida do 1o personagem o valor do ataque do 2o personagem) ao mesmo tempo. O duelo acaba quando pelo menos um dos personagens fica com vida menor ou igual a 0.</p>\n<h3 id=\"entrada\">Entrada</h3>\n<pre><code>1a linha - vida do 1o personagem  </code></pre>\n<p>\u00a0\u00a0\u00a0 2a linha - ataque do 1o personagem<br />\n\u00a0\u00a0\u00a0 3a linha - vida do 2o personagem<br />\n\u00a0\u00a0\u00a0 4a linha - ataque do 2o personagem</p>\n<h2 id=\"exemplos\">Exemplos</h2>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n100  \n20  \n100  \n1\n========\nPersonagem 1\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n100\n20\n100\n1\n========\nPersonagem 1\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n100\n20\n1000\n10\n========\nPersonagem 2\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n100\n100\n1000\n10\n========\nEmpate\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code></pre>\n<h1 id=\"section\"></h1>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=01\ninput=100\n20\n100\n1\noutput=\"Personagem 1\n\"\ngrade reduction=100%\n\n\ncase=02\ninput=100\n20\n1000\n10\noutput=\"Personagem 2\n\"\ngrade reduction=100%\n\n\ncase=03\ninput=100\n100\n1000\n10\noutput=\"Empate\n\"\ngrade reduction=100%\n\n\ncase=00\ninput=100  \n20  \n100  \n1\noutput=\"Personagem 1\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "solver.c.txt",
      "contents": "#include <stdio.h>\n\ntypedef struct {\n   int vida;\n   int ataque;\n} personagem;\n\nvoid duelo(personagem p1, personagem p2){\n   while ((p1.vida > 0) && (p2.vida > 0)) {\n      p1.vida -= p2.ataque;\n      p2.vida -= p1.ataque;\n   }\n   if ((p1.vida <= 0) && (p2.vida <= 0))\n      printf(\"Empate\\n\");\n   else if (p2.vida <= 0)\n      printf(\"Personagem 1\\n\");\n   else\n      printf(\"Personagem 2\\n\");\n}\n\nint main(){\n   personagem p1, p2;\n   scanf(\"%d\\n%d\", &p1.vida, &p1.ataque);\n   scanf(\"%d\\n%d\", &p2.vida, &p2.ataque);\n   duelo(p1,p2);\n}\n"
    }
  ],
  "requiredFile": null
}