{
  "title": "@135 #06_mat L3 - Jogo da vida",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@135 #06_mat L3 - Jogo da vida</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"mat-l3---jogo-da-vida\">#06_mat L3 - Jogo da vida</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<p><img src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/135/__capa.jpg\" /></p>\n<h2 id=\"motiva\u00e7\u00e3o\">Motiva\u00e7\u00e3o</h2>\n<p>O objetivo dessa atividade \u00e9 gerar uma nova gera\u00e7\u00e3o do jogo da vida.</p>\n<p>Regras:</p>\n<ul>\n<li>Qualquer c\u00e9lula viva com menos de dois vizinhos vivos morre de solid\u00e3o.</li>\n<li>Qualquer c\u00e9lula viva com mais de tr\u00eas vizinhos vivos morre de superpopula\u00e7\u00e3o.</li>\n<li>Qualquer c\u00e9lula morta com exatamente tr\u00eas vizinhos vivos se torna uma c\u00e9lula viva.</li>\n<li>Qualquer c\u00e9lula viva com dois ou tr\u00eas vizinhos vivos continua no mesmo estado para a pr\u00f3xima gera\u00e7\u00e3o.</li>\n</ul>\n<p>\u00c9 importante entender que todos os nascimentos e mortes ocorrem simultaneamente. Juntos eles constituem uma gera\u00e7\u00e3o ou, como podemos cham\u00e1-los, um \u201cinstante\u201d na hist\u00f3ria da vida completa da configura\u00e7\u00e3o inicial. Mais informa\u00e7\u00f5es: Procure sobre Jogo da vida na Wikipedia</p>\n<h3 id=\"entrada\">Entrada</h3>\n<pre><code>- NL, NC, seguida da matriz de char\n- Na matriz, uma c\u00e9lula morta \u00e9 representada com o char `.` e uma c\u00e9lula viva por `#`.</code></pre>\n<h3 id=\"sa\u00edda\">Sa\u00edda</h3>\n<pre><code>- Pr\u00f3xima gera\u00e7\u00e3o do jogo.</code></pre>\n<h2 id=\"exemplos\">Exemplos</h2>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n4 8\n........\n........\n..####..\n........\n========\n........\n...##...\n...##...\n...##...\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n4 8\n......#.\n.##...#.\n.#.#..#.\n..#.....\n========\n........\n.##..###\n.#.#....\n..#.....\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n7 18\n..................\n.###..............\n.#................\n..#.............#.\n..............#.#.\n.....##........##.\n.....##...........\n========\n..#...............\n.##...............\n.#.#..............\n...............#..\n................##\n.....##........##.\n.....##...........\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code></pre>\n<h1 id=\"section\"></h1>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=00\ninput=4 8\n........\n........\n..####..\n........\noutput=\"........\n...##...\n...##...\n...##...\n\"\ngrade reduction=100%\n\n\ncase=01\ninput=4 8\n......#.\n.##...#.\n.#.#..#.\n..#.....\noutput=\"........\n.##..###\n.#.#....\n..#.....\n\"\ngrade reduction=100%\n\n\ncase=02\ninput=7 18\n..................\n.###..............\n.#................\n..#.............#.\n..............#.#.\n.....##........##.\n.....##...........\noutput=\"..#...............\n.##...............\n.#.#..............\n...............#..\n................##\n.....##........##.\n.....##...........\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "solver.c.txt",
      "contents": "#include <stdio.h>\n#include <stdbool.h>\n//L, LU, U, UR, R, RD, D, DL\ntypedef struct{\n    int l, c;\n}LC;\n#define get_neib(l, c) {{l+0,c-1},{l-1,c-1},{l-1,c+0},{l-1,c+1},{l+0,c+1},{l+1,c+1},{l+1,c+0},{l+1,c-1}}\n\nint contar_vizinhos(int nl, int nc, bool mat[nl][nc], int l, int c){\n    LC neib[] = get_neib(l, c);\n    int cont = 0;\n    for(int i = 0; i < 8; i++){\n        if((neib[i].l < 0) || (neib[i].l >= nl) || (neib[i].c < 0) || (neib[i].c >= nc))\n            continue;\n        if(mat[neib[i].l][neib[i].c])\n            cont++;\n    }\n    return cont;\n}\n\nvoid live_or_die(int nl, int nc, bool mat[nl][nc], bool nova[nl][nc], int l, int c){\n    int cont = contar_vizinhos(nl, nc, mat, l, c);\n    nova[l][c] = mat[l][c];\n    if((mat[l][c] == false) && (cont == 3))\n        nova[l][c] = true;\n    else if((mat[l][c] == true) && ((cont < 2) || (cont > 3)))\n        nova[l][c] = false;\n}\n\nvoid nova_geracao(int nl, int nc, bool mat[nl][nc]){\n    bool nova[nl][nc];\n    for(int l = 0; l < nl; l++)\n        for(int c = 0; c < nc; c++)\n            live_or_die(nl, nc, mat, nova, l, c);\n    for(int l = 0; l < nl; l++)\n        for(int c = 0; c < nc; c++)\n            mat[l][c] = nova[l][c];\n}\n\nint main(){\n    int nl, nc;\n    char c;\n    scanf(\"%d %d\", &nl, &nc);\n    bool mat[nl][nc];\n    for(int i = 0; i < nl * nc; i++){\n        scanf(\" %c\", &c);\n        *(&mat[0][0] + i) = (c == '#');\n    }\n    nova_geracao(nl, nc, mat);\n    for(int l = 0; l < nl; l++){\n        for(int c = 0; c < nc; c++){\n            printf(\"%c\", (mat[l][c]?'#':'.'));\n        }\n        puts(\"\");\n    }\n}"
    }
  ],
  "requiredFile": null
}