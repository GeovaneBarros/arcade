{
  "title": "@186 $04_vet L2 - Processando uma linha de inteiros",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@186 $04_vet L2 - Processando uma linha de inteiros</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <style>\npre > code.sourceCode { white-space: pre; position: relative; }\npre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\npre > code.sourceCode > span:empty { height: 1.2em; }\ncode.sourceCode > span { color: inherit; text-decoration: inherit; }\ndiv.sourceCode { margin: 1em 0; }\npre.sourceCode { margin: 0; }\n@media screen {\ndiv.sourceCode { overflow: auto; }\n}\n@media print {\npre > code.sourceCode { white-space: pre-wrap; }\npre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n}\npre.numberSource code\n  { counter-reset: source-line 0; }\npre.numberSource code > span\n  { position: relative; left: -4em; counter-increment: source-line; }\npre.numberSource code > span > a:first-child::before\n  { content: counter(source-line);\n    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n    border: none; display: inline-block;\n    -webkit-touch-callout: none; -webkit-user-select: none;\n    -khtml-user-select: none; -moz-user-select: none;\n    -ms-user-select: none; user-select: none;\n    padding: 0 4px; width: 4em;\n    color: #aaaaaa;\n  }\npre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\ndiv.sourceCode\n  {   }\n@media screen {\npre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n}\ncode span.al { color: #ff0000; font-weight: bold; } /* Alert */\ncode span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\ncode span.at { color: #7d9029; } /* Attribute */\ncode span.bn { color: #40a070; } /* BaseN */\ncode span.bu { } /* BuiltIn */\ncode span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\ncode span.ch { color: #4070a0; } /* Char */\ncode span.cn { color: #880000; } /* Constant */\ncode span.co { color: #60a0b0; font-style: italic; } /* Comment */\ncode span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\ncode span.do { color: #ba2121; font-style: italic; } /* Documentation */\ncode span.dt { color: #902000; } /* DataType */\ncode span.dv { color: #40a070; } /* DecVal */\ncode span.er { color: #ff0000; font-weight: bold; } /* Error */\ncode span.ex { } /* Extension */\ncode span.fl { color: #40a070; } /* Float */\ncode span.fu { color: #06287e; } /* Function */\ncode span.im { } /* Import */\ncode span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\ncode span.kw { color: #007020; font-weight: bold; } /* Keyword */\ncode span.op { color: #666666; } /* Operator */\ncode span.ot { color: #007020; } /* Other */\ncode span.pp { color: #bc7a00; } /* Preprocessor */\ncode span.sc { color: #4070a0; } /* SpecialChar */\ncode span.ss { color: #bb6688; } /* SpecialString */\ncode span.st { color: #4070a0; } /* String */\ncode span.va { color: #19177c; } /* Variable */\ncode span.vs { color: #4070a0; } /* VerbatimString */\ncode span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"vet-l2---processando-uma-linha-de-inteiros\">$04_vet L2 - Processando uma linha de inteiros</h2>\n<p><img src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/186/__capa.jpg\" /></p>\n<p>Voc\u00ea n\u00e3o precisa saber o tamanho do vetor quando for ler uma linha com dados. Em python o comando <code>input().split(\" \")</code> j\u00e1 retorna o vetor dividido. Em <code>c</code>e <code>c++</code> voc\u00ea tem algumas formas de fazer isso.</p>\n<p>Em <code>c</code> voc\u00ea pode ler os dados e o <code>char</code> seguido a esse dado. Se utilizar <code>scanf(\"%d%c\"</code>, sem o espa\u00e7o antes do<code>%c</code> voc\u00ea est\u00e1 informando ao <code>scanf</code> para n\u00e3o ignorar os <em>whitespaces</em>. O c\u00f3digo baixo vai em cada rodada do la\u00e7o pegar o inteiro e o char sequencial a ele. Se esse char for um <code>\\n</code> significa que a linha acabou.</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"pp\">#include </span><span class=\"im\">&lt;stdio.h&gt;</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"dt\">int</span> main(){</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>    <span class=\"dt\">int</span> value;</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a>    <span class=\"dt\">char</span> c;</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a>    <span class=\"cf\">do</span>{</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a>        scanf(<span class=\"st\">&quot;%d%c&quot;</span>, &amp;value, &amp;c);</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a>        printf(<span class=\"st\">&quot;%d &quot;</span>, value);</span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\"></a>    }<span class=\"cf\">while</span>(c != <span class=\"ch\">&#39;\\n&#39;</span>);</span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\"></a>    print(<span class=\"st\">&quot;</span><span class=\"sc\">\\n</span><span class=\"st\">&quot;</span>);</span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\"></a>}</span></code></pre></div>\n<p>Agora tente adaptar esse c\u00f3digo para carregar v\u00e1rios inteiros em um vetor e depois imprimir o vetor ao contr\u00e1rio.</p>\n<hr />\n<ul>\n<li>Entrada:\n<ul>\n<li>N inteiros numa mesma linha, (1&lt; N &lt; 30).</li>\n</ul></li>\n<li>Sa\u00edda:\n<ul>\n<li>O vetor impresso ao contr\u00e1rio.</li>\n</ul></li>\n</ul>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n19 12 32 11 17 15\n========\n[ 15 17 11 32 12 19 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n15\n========\n[ 15 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n15 12\n========\n[ 12 15 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n15 17 11\n========\n[ 11 17 15 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=00\ninput=19 12 32 11 17 15\noutput=\"[ 15 17 11 32 12 19 ]\n\"\ngrade reduction=100%\n\n\ncase=01\ninput=15\noutput=\"[ 15 ]\n\"\ngrade reduction=100%\n\n\ncase=02\ninput=15 12\noutput=\"[ 12 15 ]\n\"\ngrade reduction=100%\n\n\ncase=03\ninput=15 17 11\noutput=\"[ 11 17 15 ]\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "solver.c.txt",
      "contents": "#include <stdio.h>\nint main(){\n    int vet[30];\n    int size = 0;\n    char c;\n    do{\n        scanf(\"%d%c\", &vet[size], &c);\n        size += 1;\n    }while(c != '\\n');\n    printf(\"[ \");\n    for(int i = size - 1; i >= 0; i--){\n        printf(\"%d \", vet[i]);\n    }\n    printf(\"]\\n\");\n}"
    }
  ],
  "requiredFile": null
}