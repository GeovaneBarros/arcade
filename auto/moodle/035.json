{
  "title": "@035 L2 - OBI 2017 - Fase 1 - Drone de Entrega",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@035 L2 - OBI 2017 - Fase 1 - Drone de Entrega</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"sel-l2---obi-2017---fase-1---drone-de-entrega\">$02_sel L2 - OBI 2017 - Fase 1 - Drone de Entrega</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<p><img src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/035/__capa.jpg\" /></p>\n<h2 id=\"motiva\u00e7\u00e3o\">Motiva\u00e7\u00e3o</h2>\n<p>A loja do Par\u00e1, especializada em vendas pela internet, est\u00e1 desenvolvendo drones para entrega de caixas com as compras dos clientes. Cada caixa tem a forma de um paralelep\u00edpedo reto ret\u00e2ngulo (ou seja, no formato de um tijolo).</p>\n<p>O drone entregar\u00e1 uma caixa de cada vez, e colocar\u00e1 a caixa diretamente dentro da casa do cliente, atrav\u00e9s de uma janela. Todas as janelas dos clientes t\u00eam o formato retangular e est\u00e3o sempre totalmente abertas. O drone tem um aplicativo de vis\u00e3o computacional que calcula exatamente as dimens\u00f5es H e L da janela. O drone consegue colocar a caixa atrav\u00e9s da janela somente quando uma das faces da caixa est\u00e1 paralela \u00e0 janela, mas consegue virar e rotacionar a caixa antes de pass\u00e1-la pela janela.</p>\n<p>O aplicativo de controle do drone est\u00e1 quase pronto, mas falta um pequeno detalhe: um programa que, dadas as dimens\u00f5es da maior janela do cliente e as dimens\u00f5es da caixa que deve ser entregue, determine se o drone vai ser capaz de entregar a compra (pela janela) ou se a compra ter\u00e1 que ser entregue por meios normais.</p>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A entrada \u00e9 composta por cinco linhas, cada uma contendo um n\u00famero inteiro. A tr\u00eas primeiras linhas cont\u00eam os valores A, B, C, indicando as tr\u00eas dimens\u00f5es da caixa, em cent\u00edmetros. As duas \u00faltimas linhas cont\u00eam os valores H e L, indicando a altura e a largura da janela, em cent\u00edmetros.</li>\n</ul>\n<h3 id=\"sa\u00edda\">Sa\u00edda</h3>\n<ul>\n<li>Seu programa deve escrever uma \u00fanica linha, contendo apenas a letra S se a caixa passa pela janela e apenas a letra N em caso contr\u00e1rio.</li>\n</ul>\n<h2 id=\"restri\u00e7\u00f5es\">Restri\u00e7\u00f5es</h2>\n<ul>\n<li>1 \u2264 A, B, C \u2264 100</li>\n<li>1 \u2264 H, L \u2264 100</li>\n</ul>\n<h2 id=\"exemplos\">Exemplos</h2>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n30\n50\n80\n80\n60\n========\nS\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n75\n100\n50\n100\n30\n========\nN\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n20\n22\n5\n20\n10\n========\nS\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code></pre>\n<h1 id=\"section\"></h1>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=02\ninput=20\n22\n5\n20\n10\noutput=\"S\n\"\ngrade reduction=100%\n\n\ncase=00\ninput=30\n50\n80\n80\n60\noutput=\"S\n\"\ngrade reduction=100%\n\n\ncase=01\ninput=75\n100\n50\n100\n30\noutput=\"N\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "solver.c.txt",
      "contents": "#include <stdio.h>\n\nint A, B, C;\nint H, L;\n\nint check(int X, int Y) {\n  return X <= H && Y <= L;\n}\n\nint main() {\n  scanf(\"%d %d %d\", &A, &B, &C);\n  scanf(\"%d %d\", &H, &L);\n  \n  int ok = check(A, B) || check(B, C) || check(C, A) ||\n           check(B, A) || check(C, B) || check(A, C);\n  \n  if (ok)\n    printf(\"S\\n\");\n  else\n    printf(\"N\\n\");\n  return 0;\n}"
    }
  ],
  "requiredFile": null
}