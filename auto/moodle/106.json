{
  "title": "@106 L2 - Valdiskley e a cifra V2!",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@106 L2 - Valdiskley e a cifra V2\\!</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"str-l2---valdiskley-e-a-cifra-v2\">#05_str L2 - Valdiskley e a cifra V2!</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<p><img src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/106/__capa.jpg\" /></p>\n<h2 id=\"motiva\u00e7\u00e3o\">Motiva\u00e7\u00e3o</h2>\n<p>Valdiskley \u00e9 muito nerd e depois de estudar criptografia ele bolou um plano infal\u00edvel para conquistar o amor da sua vida. Seu plano \u00e9 o seguinte:<br />\nEle vai escrever v\u00e1rias cartinhas criptografadas pra ela e s\u00f3 vai dizer a senha pra ela descriptografar as cartinhas de amor se ela aceitar namorar com ele.</p>\n<h2 id=\"a\u00e7\u00e3o\">A\u00e7\u00e3o</h2>\n<p>Acompanhe o desenrolar da hist\u00f3ria de amor de Valdiskey por Valentina em 3 cap\u00edtulos.</p>\n<p>No cap\u00edtulo 1 voc\u00ea precisa ser capaz de realizar a opera\u00e7\u00e3o de cifragem b\u00e1sica com dois caracteres.</p>\n<p>No cap\u00edtulo 2 voc\u00ea vai escrever o algoritmo que permite a Valentina usar a chave para descobrir o conte\u00fado das cartinhas de amor.</p>\n<p>No cap\u00edtulo 3 voc\u00ea vai usar um algoritmo de for\u00e7a bruta para \u201cquebrar\u201d a criptografia do pedido de casamento.</p>\n<p>Na opera\u00e7\u00e3o entre dois caracteres podemos imaginar uma lista circular onde o \u2018a\u2019 reinicia depois do \u2018z\u2019. Voc\u00ea pode pensar que \u2018a\u2019 vale 0, \u2018b\u2019 vale 1 e assim por diante.</p>\n<p>a + a = a a + b = b b + a = b b + b = c c + c = e c + b = d d + e = h</p>\n<p>z + a = z z + b = a</p>\n<p>Na descriptografia utilizamos a opera\u00e7\u00e3o inversa.</p>\n<p>c - a = c c - b = b c - c = a c - d = z c - e = y</p>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>Um caractere minusculo.</li>\n<li>Linha: a opera\u00e7\u00e3o \u2018-\u2019 ou \u2018+\u2019.</li>\n<li>Linha: Um segundo caractere min\u00fasculo.</li>\n</ul>\n<h3 id=\"sa\u00edda\">Sa\u00edda</h3>\n<ul>\n<li>O resultado da opera\u00e7\u00e3o de criptografia ou descriptografia.</li>\n</ul>\n<h2 id=\"exemplos\">Exemplos</h2>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\na\n+\na\n========\na\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nb\n+\nd\n========\ne\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nz\n+\nc\n========\nb\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nf\n-\nd\n========\nc\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nb\n-\nc\n========\nz\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nb\n+\nb\n========\nc\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code></pre>\n<h1 id=\"section\"></h1>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=00\ninput=a\n+\na\noutput=\"a\n\"\ngrade reduction=100%\n\n\ncase=01\ninput=b\n+\nd\noutput=\"e\n\"\ngrade reduction=100%\n\n\ncase=02\ninput=z\n+\nc\noutput=\"b\n\"\ngrade reduction=100%\n\n\ncase=03\ninput=f\n-\nd\noutput=\"c\n\"\ngrade reduction=100%\n\n\ncase=04\ninput=b\n-\nc\noutput=\"z\n\"\ngrade reduction=100%\n\n\ncase=05\ninput=b\n+\nb\noutput=\"c\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "solver.py.txt",
      "contents": "def op_soma(x, y):\n    nx = ord(x) - ord('a')\n    ny = ord(y) - ord('a')\n    soma = (nx + ny)\n    if soma > 25:\n        soma -= 26\n    soma += ord('a')\n    soma = chr(soma)\n    return soma\n\ndef op_subt(x, y):\n    nx = ord(x) - ord('a')\n    ny = ord(y) - ord('a')\n    subt = (nx - ny + 26) % 26\n    if subt < 0:\n        subt += 26\n    subt += ord('a')\n    subt = chr(subt)\n    return subt\n\nletra = input()\nop = input()\nrot = input()\n\nif op == '-':\n    print (op_subt(letra, rot))\nelse:\n    print (op_soma(letra, rot))"
    },
    {
      "name": "solver.c.txt",
      "contents": "#include <stdio.h>\n\nint main () {\n\t\n\tint numLetra;\n\tchar letra, op, letra2;\n\tint rotacao;\n\t\n\tscanf(\"%c\\n\", &letra);\n\tscanf(\"%c\\n\", &op);\n\tscanf(\"%c\", &letra2);\n\n\trotacao = letra2 - 'a';\n\tif(op == '-') rotacao *= (-1);\n\t\n\tnumLetra = letra - 'a';\n\tnumLetra = (numLetra + rotacao) % ('z' - 'a' + 1);\n\twhile (numLetra < 0) numLetra += ('z' - 'a' + 1); \n\n\tprintf(\"%c\\n\", numLetra + 'a');\n\treturn 0;\n}"
    }
  ],
  "requiredFile": null
}