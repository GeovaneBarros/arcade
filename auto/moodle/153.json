{
  "title": "@153 #06_mat L3 - OBI 2015 - Fase 2 - N\u00edvel 1 - Torre",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@153 #06_mat L3 - OBI 2015 - Fase 2 - N\u00edvel 1 - Torre</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"mat-l3---obi-2015---fase-2---n\u00edvel-1---torre\">#06_mat L3 - OBI 2015 - Fase 2 - N\u00edvel 1 - Torre</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<p><img src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/153/__capa.jpg\" /></p>\n<h2 id=\"motiva\u00e7\u00e3o\">Motiva\u00e7\u00e3o</h2>\n<p>Dada uma matriz quadrada M de n\u00fameros naturais, o \u00edndice i de uma certa linha e o \u00edndice j de uma certa coluna, vamos definir o peso do cruzamento da linha i com a coluna j, como sendo a soma de todos os elementos que estejam na linha i ou na coluna j, mas n\u00e3o nas duas. Quer dizer, excluindo o elemento que est\u00e1 exatamente no cruzamento! Neste problema, voc\u00ea deve descobrir qual \u00e9 o peso m\u00ednimo entre todos os poss\u00edveis cruzamentos da matriz!</p>\n<p>No jogo de xadrez, a torre \u00e9 uma pe\u00e7a que pode se mover para qualquer outra posi\u00e7\u00e3o do tabuleiro na linha ou na coluna da posi\u00e7\u00e3o que ela ocupa. O professor Paulo est\u00e1 tentando inventar um novo tipo de jogo de xadrez onde todas as pe\u00e7as s\u00e3o torres, o tabuleiro tamb\u00e9m \u00e9 quadrado mas pode ter qualquer dimens\u00e3o e cada posi\u00e7\u00e3o do tabuleiro \u00e9 anotada com um n\u00famero inteiro positivo, como na figura abaixo.</p>\n<p>Ele definiu o peso de uma posi\u00e7\u00e3o (i,j) como sendo a soma de todos os n\u00fameros que estejam na linha i com todos os n\u00fameros da coluna j, mas sem somar o n\u00famero que est\u00e1 exatamente na posi\u00e7\u00e3o (i,j). Quer dizer, se uma torre estiver na posi\u00e7\u00e3o (i,j), o peso da posi\u00e7\u00e3o \u00e9 a soma de todas as posi\u00e7\u00f5es que essa torre poderia atacar.</p>\n<p>O professor Paulo est\u00e1 solicitando a sua ajuda para implementar um programa que determine qual \u00e9 o peso m\u00e1ximo entre todas as posi\u00e7\u00f5es do tabuleiro.</p>\n<p>No exemplo da figura acima, com um tabuleiro de dimens\u00e3o seis (ou seja, seis linhas por seis colunas), o peso m\u00e1ximo \u00e9 67, referente \u00e0 posi\u00e7\u00e3o (4,4).</p>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li><p>A primeira linha da entrada cont\u00e9m um inteiro N, representando a dimens\u00e3o do tabuleiro.</p></li>\n<li><p>Cada uma das N linhas seguintes cont\u00e9m N inteiros positivos X_i, definindo os n\u00fameros em cada posi\u00e7\u00e3o do tabuleiro.</p></li>\n</ul>\n<h3 id=\"sa\u00edda\">Sa\u00edda</h3>\n<p>Seu programa deve produzir uma \u00fanica linha, contendo um \u00fanico inteiro, o peso m\u00e1ximo entre todas as posi\u00e7\u00f5es do tabuleiro.</p>\n<h2 id=\"restri\u00e7\u00f5es\">Restri\u00e7\u00f5es</h2>\n<ul>\n<li>3 \u2264 N \u2264 1000</li>\n<li>0 &lt; X_i \u2264 100</li>\n</ul>\n<h2 id=\"informa\u00e7\u00f5es-sobre-a-pontua\u00e7\u00e3o\">Informa\u00e7\u00f5es sobre a pontua\u00e7\u00e3o</h2>\n<ul>\n<li>Em um conjunto de casos de teste cuja soma \u00e9 60 pontos, N \u2264 300.</li>\n</ul>\n<h2 id=\"exemplos\">Exemplos</h2>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n6\n4 1 3 8 4 5\n9 2 8 9 2 7\n5 5 4 3 2 5\n8 2 9 1 9 8\n7 1 3 2 1 2\n5 1 2 9 3 8\n========\n67\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n3\n5 1 1\n5 2 1\n8 5 5\n========\n20\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code></pre>\n<h1 id=\"section\"></h1>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=01\ninput=3\n5 1 1\n5 2 1\n8 5 5\noutput=\"20\n\"\ngrade reduction=100%\n\n\ncase=00\ninput=6\n4 1 3 8 4 5\n9 2 8 9 2 7\n5 5 4 3 2 5\n8 2 9 1 9 8\n7 1 3 2 1 2\n5 1 2 9 3 8\noutput=\"67\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "solver.c.txt",
      "contents": "/* Guilherme A. Pinto, OBI-2015, matriz */\n\n#include <stdio.h>\n\n#define MAX 1000\n\nint M[MAX][MAX];\nint L[MAX],C[MAX];\n\nint main(){\n  int i,j,k,N,max,p;\n\n  scanf(\"%d\", &N);\n  for( i = 0; i < N; i++ )\n    for( j = 0; j < N; j++ )\n      scanf(\"%d\",&M[i][j]);\n\n  for( i = 0; i < N; i++ ){\n    L[i] = C[i] = 0;\n    for( k = 0; k < N; k++ ){\n      L[i] += M[i][k];\n      C[i] += M[k][i];\n    }\n  }\n  \n  max = -1;\n  for( i = 0; i < N; i++ )\n    for( j = 0; j < N; j++ ){\n      p = L[i]+C[j]-2*M[i][j];\n      max = max > p ? max : p;\n    }\n\n  printf(\"%d\\n\",max);\n  \n  return 0;\n}"
    }
  ],
  "requiredFile": null
}