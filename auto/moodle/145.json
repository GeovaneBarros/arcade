{
  "title": "@145 L2 - Contando caracteres recursivamente",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@145 L2 - Contando caracteres recursivamente</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <style>\npre > code.sourceCode { white-space: pre; position: relative; }\npre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\npre > code.sourceCode > span:empty { height: 1.2em; }\ncode.sourceCode > span { color: inherit; text-decoration: inherit; }\ndiv.sourceCode { margin: 1em 0; }\npre.sourceCode { margin: 0; }\n@media screen {\ndiv.sourceCode { overflow: auto; }\n}\n@media print {\npre > code.sourceCode { white-space: pre-wrap; }\npre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n}\npre.numberSource code\n  { counter-reset: source-line 0; }\npre.numberSource code > span\n  { position: relative; left: -4em; counter-increment: source-line; }\npre.numberSource code > span > a:first-child::before\n  { content: counter(source-line);\n    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n    border: none; display: inline-block;\n    -webkit-touch-callout: none; -webkit-user-select: none;\n    -khtml-user-select: none; -moz-user-select: none;\n    -ms-user-select: none; user-select: none;\n    padding: 0 4px; width: 4em;\n    color: #aaaaaa;\n  }\npre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\ndiv.sourceCode\n  {   }\n@media screen {\npre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n}\ncode span.al { color: #ff0000; font-weight: bold; } /* Alert */\ncode span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\ncode span.at { color: #7d9029; } /* Attribute */\ncode span.bn { color: #40a070; } /* BaseN */\ncode span.bu { } /* BuiltIn */\ncode span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\ncode span.ch { color: #4070a0; } /* Char */\ncode span.cn { color: #880000; } /* Constant */\ncode span.co { color: #60a0b0; font-style: italic; } /* Comment */\ncode span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\ncode span.do { color: #ba2121; font-style: italic; } /* Documentation */\ncode span.dt { color: #902000; } /* DataType */\ncode span.dv { color: #40a070; } /* DecVal */\ncode span.er { color: #ff0000; font-weight: bold; } /* Error */\ncode span.ex { } /* Extension */\ncode span.fl { color: #40a070; } /* Float */\ncode span.fu { color: #06287e; } /* Function */\ncode span.im { } /* Import */\ncode span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\ncode span.kw { color: #007020; font-weight: bold; } /* Keyword */\ncode span.op { color: #666666; } /* Operator */\ncode span.ot { color: #007020; } /* Other */\ncode span.pp { color: #bc7a00; } /* Preprocessor */\ncode span.sc { color: #4070a0; } /* SpecialChar */\ncode span.ss { color: #bb6688; } /* SpecialString */\ncode span.st { color: #4070a0; } /* String */\ncode span.va { color: #19177c; } /* Variable */\ncode span.vs { color: #4070a0; } /* VerbatimString */\ncode span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"rec-l2---contando-caracteres-recursivamente\">#07_rec L2 - Contando caracteres recursivamente</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<p><img src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/145/__capa.jpg\" /></p>\n<h2 id=\"a\u00e7\u00e3o\">A\u00e7\u00e3o</h2>\n<p>Forne\u00e7a um algoritmo recursivo para contar quantas vezes um determinado caractere ocorre em uma string. N\u00e3o \u00e9 permitido usar comandos de repeti\u00e7\u00e3o nesta fun\u00e7\u00e3o. A fun\u00e7\u00e3o main e o prot\u00f3tipo da fun\u00e7\u00e3o recursiva s\u00e3o fornecidos no arquivo de envio logo abaixo.</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"pp\">#include </span><span class=\"im\">&lt;stdio.h&gt;</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a><span class=\"pp\">#include </span><span class=\"im\">&lt;string.h&gt;</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a><span class=\"co\">// Retorna o n\u00fameros de ocorr\u00eancias do caractere &#39;c&#39; na string &#39;s&#39; (com &#39;n&#39; caracteres).</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a><span class=\"co\">// Algoritmo deve ser recursivo e sem comandos de repeti\u00e7\u00e3o.</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a><span class=\"dt\">int</span> conta_char_rec(<span class=\"dt\">char</span> s[], <span class=\"dt\">int</span> n, <span class=\"dt\">char</span> c){</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\"></a>}</span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\"></a></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\"></a><span class=\"dt\">int</span> main(){</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\"></a>   <span class=\"dt\">char</span> s[<span class=\"dv\">102</span>], c;</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\"></a>   fgets(s, <span class=\"kw\">sizeof</span>(s), stdin);</span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\"></a>   scanf(<span class=\"st\">&quot;%c&quot;</span>, &amp;c);</span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\"></a>   <span class=\"dt\">int</span> n = strlen(s) - <span class=\"dv\">1</span>;</span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\"></a>   printf(<span class=\"st\">&quot;%d&quot;</span>, conta_char_rec(s,n,c));</span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\"></a>}</span></code></pre></div>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>Linha 1: string com at\u00e9 100 caracteres.</li>\n<li>Linha 2: caractere (que ser\u00e1 contado na string anterior)</li>\n</ul>\n<h3 id=\"sa\u00edda\">Sa\u00edda</h3>\n<ul>\n<li>N\u00famero de ocorr\u00eancias do caractere na string.</li>\n</ul>\n<h2 id=\"exemplos\">Exemplos</h2>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nfundamentos de programacao\na\n========\n4\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code></pre>\n<h1 id=\"section\"></h1>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=00\ninput=fundamentos de programacao\na\noutput=\"4\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "solver.c.txt",
      "contents": "#include <stdio.h>\n#include <string.h>\n\n// Retorna o n\u00fameros de ocorr\u00eancias do caractere 'c' na string 's' (com 'n' caracteres).\n// Algoritmo deve ser recursivo e sem comandos de repeti\u00e7\u00e3o.\nint conta_char_rec(char s[], int n, char c){\n    if (n == 0) return 0;\n    if (s[n-1] == c) return 1 + conta_char_rec(s,n-1,c);\n    return 0 + conta_char_rec(s,n-1,c);\n}\n\nint main(){\n   char s[102], c;\n   fgets(s, sizeof(s), stdin);\n   scanf(\"%c\", &c);\n   int n = strlen(s) - 1;\n   printf(\"%d\\n\", conta_char_rec(s,n,c));\n}"
    }
  ],
  "requiredFile": null
}