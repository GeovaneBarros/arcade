{
  "title": "@107 L3 - Valdiskley e a Cifra v3!",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@107 L3 - Valdiskley e a Cifra v3\\!</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"str-l3---valdiskley-e-a-cifra-v3\">#05_str L3 - Valdiskley e a Cifra v3!</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<p><img src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/107/__capa.jpg\" /></p>\n<h2 id=\"motiva\u00e7\u00e3o\">Motiva\u00e7\u00e3o</h2>\n<p>No cap\u00edtulo 3 da saga de Valdiskey voc\u00ea vai escrever o algoritmo que faz a criptografia e descriptografia.<br />\nValentina aceitou o namoro e vai usar o seu c\u00f3digo para ler o conte\u00fado das cartinhas de amor de Valdiskley.<br />\nSe voc\u00ea quiser pesquisar o nome dessa cifra \u00e9 cifra de Vigenere.</p>\n<p><a href=\"http://pt.wikipedia.org/wiki/Cifra_de_Vigen%C3%A8re\">http://pt.wikipedia.org/wiki/Cifra_de_Vigen%C3%A8re</a></p>\n<h2 id=\"a\u00e7\u00e3o\">A\u00e7\u00e3o</h2>\n<p>Primeiro a criptografia:</p>\n<p>Dado um texto claro e uma chave voc\u00ea deve:<br />\n1 - Repetir a chave at\u00e9 que ela tenha o mesmo tamanho do texto claro. No caso abaixo, repetimos a palavra princesa at\u00e9 completar a frase.<br />\n2 - Voc\u00ea soma os caracteres 2 a 2 como aprendeu a fazer no segundo cap\u00edtulo da hist\u00f3ria de Valdiskley. Ignore a pontua\u00e7\u00e3o e opere apenas as letras.</p>\n<p>Exemplo 1: chave: \u201cabac\u201d<br />\ntexto: batata? sim! Frita!!<br />\nsenha: abacab aca bacab<br />\nsaida: bbtctb? skm! Grktb!!</p>\n<p>Exemplo 2:<br />\nchave: \u201cprincesa\u201d<br />\ntexto: \u201cquando vi voce eu buguei\u201d<br />\nsenha: \u201cprince sa prin ce saprin\u201d<br />\nsaida: \u201cfliafs ni kfkr gy tuvlmv\u201d</p>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A frase a ser operada, apenas caracteres min\u00fasculos e pontua\u00e7\u00e3o.</li>\n<li>A palavra chave, apenas caracteres min\u00fasculos e sem espa\u00e7os ou pontua\u00e7\u00e3o.</li>\n<li>A opera\u00e7\u00e3o de \u2018+\u2019 para cifrar ou \u2018-\u2019 para descifrar.</li>\n</ul>\n<p>A opera\u00e7\u00e3o de descifrar \u00e9 o contr\u00e1rio da cifragem.</p>\n<h3 id=\"sa\u00edda\">Sa\u00edda</h3>\n<ul>\n<li>O resultado da opera\u00e7\u00e3o.</li>\n</ul>\n<h2 id=\"exemplos\">Exemplos</h2>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nbatata? sim! frita!!\nabac\n+\n========\nbbtctb? skm! grktb!!\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nquando vi voce eu buguei\nprincesa\n+\n========\nfliafs ni kfkr gy tuvlmv\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\na data ua bbfrua\nab\n-\n========\na casa ta aberta\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code></pre>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=02\ninput=a data ua bbfrua\nab\n-\noutput=\"a casa ta aberta\n\"\ngrade reduction=100%\n\n\ncase=00\ninput=batata? sim! frita!!\nabac\n+\noutput=\"bbtctb? skm! grktb!!\n\"\ngrade reduction=100%\n\n\ncase=01\ninput=quando vi voce eu buguei\nprincesa\n+\noutput=\"fliafs ni kfkr gy tuvlmv\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "solver.c.txt",
      "contents": "#include <stdio.h>\n\nint main(){\n    char frase[100], chave[100], op;\n    int j = 0;\n    scanf(\"%[^\\n]s\", frase);\n    scanf(\" %[^\\n]s\", chave);\n    scanf(\" %c\", &op);\n\n    for(int i = 0; frase[i] != 0; i++){\n        if(frase[i] >= 'a' && frase[i] <= 'z'){\n            if(chave[j] == 0) j = 0;\n            if(op == '+'){\n                frase[i] = ((frase[i] - 'a') + (chave[j] - 'a'))%26;\n            }else{\n                frase[i] = ((frase[i] - 'a') - (chave[j] - 'a') + 26)%26;\n            }\n            j++;\n            frase[i] += 'a';\n        }\n        printf(\"%c\", frase[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}"
    },
    {
      "name": "solver.cpp.txt",
      "contents": "#include <iostream>\nusing namespace std;\n\n\n//soma c e d, de forma modular, o ref \u00e9 pra 'a' ou 'A' no char a ser cifrado\nchar opera_char (char c, char d, bool to_sum){\n    char ref = isupper(c) ? 'A' : 'a'; //se eh maiusculo ou minusculo\n    int vc = c - ref; //valor de c\n    int vd = d - 'a'; //o cifrador eh sempre minusculo\n    int soma = (to_sum)?(vc + vd) % 26 : (vc - vd + 26) % 26;\n    return ((char )(soma + ref));\n}\n\nstring cifra_vigenere(string texto, string senha, bool cifrar)\n{\n    string saida(texto);\n\n    int cont = 0; //controla qual letra da senha ser\u00e1 usada\n    for(int i = 0; i < (int) texto.size(); i++){\n        char c = texto[i];\n        if(isupper(c) or islower(c)){\n            char d = senha[cont % (int) senha.size()];\n            cont++; //da proxima vez pega a proxima letra da senha\n            saida[i] = opera_char(c, d, cifrar);\n        }\n    }\n    return saida;\n}\n\n\n\nint main() {\n    string texto;\n    string cifra;\n    char op;\n    getline(cin, texto);\n    getline(cin, cifra);\n    cin >> op;\n    bool operation = (op == '+');\n    string saida = cifra_vigenere(texto, cifra, operation);\n    cout << saida << endl;\n\n    return 0;\n}\n"
    }
  ],
  "requiredFile": null
}