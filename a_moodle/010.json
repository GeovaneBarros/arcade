{
  "name": "@010 #04_vet L3 - Bolinhas viciadas(contagem de repeti\u00e7\u00f5es)",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@010 #04_vet L3 - Bolinhas viciadas(contagem de repeti\u00e7\u00f5es)</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"vet-l3---bolinhas-viciadascontagem-de-repeti\u00e7\u00f5es\">#04_vet L3 - Bolinhas viciadas(contagem de repeti\u00e7\u00f5es)</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<p><img src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/010/__capa.jpg\" /></p>\n<h2 id=\"motiva\u00e7\u00e3o\">Motiva\u00e7\u00e3o</h2>\n<p>Voc\u00ea, enquanto passeava pelos corredores esquecidos de sua Universidade descobriu um jogo de apostas clandestino. Nele, existe um GRANDE cilindro como de bingo cheio de bolinhas de gude numeradas. Todo dia uma bolinha \u00e9 sorteada, o n\u00famero \u00e9 anotado e depois ela \u00e9 colocada de volta.</p>\n<p>Os participantes do jogo n\u00e3o sabem quantas bolinhas existem, nem quais n\u00fameros est\u00e3o escritos nas bolinhas, podendo inclusive ter n\u00fameros repetidos. Eles podem, por\u00e9m, ter acesso a todas as jogadas passadas que aconteceram.</p>\n<p>Ent\u00e3o voc\u00ea teve uma ideia! Que tal analisar a frequ\u00eancia de ocorr\u00eancia dos n\u00fameros e verificar o n\u00famero que se repete mais. Talvez seja uma bila com mais peso que as outras, ou v\u00e1rias bilas com o mesmo n\u00famero.</p>\n<h2 id=\"a\u00e7\u00e3o\">A\u00e7\u00e3o</h2>\n<p>Conte as ocorr\u00eancias e descubra qual elemento ocorre mais vezes no vetor.</p>\n<h3 id=\"entrada\">Entrada:</h3>\n<ul>\n<li>linha 1: um n\u00famero com a quantidade de elementos do vetor (at\u00e9 5000)</li>\n<li>linha 2: o vetor de inteiros.</li>\n</ul>\n<h3 id=\"sa\u00edda\">Sa\u00edda:</h3>\n<ul>\n<li>linha 1: a quantidade de elementos diferentes.</li>\n<li>linha 2: o elemento que se repete mais, se mais de um, coloque todos em ordem crescente.</li>\n</ul>\n<h2 id=\"exemplos\">Exemplos</h2>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 01\n3 \n1 1 2\n========\n2\n1\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 02\n5\n1 3 2 2 3\n========\n3\n2 3\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 03\n10\n2 9 3 3 3 2 1 4 1 1\n========\n5\n1 3\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code></pre>\n<h1 id=\"section\"></h1>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=00\ninput=3 \n1 1 2\noutput=\"2\n1\n\"\ngrade reduction=100%\n\n\ncase=01\ninput=5\n1 3 2 2 3\noutput=\"3\n2 3\n\"\ngrade reduction=100%\n\n\ncase=02\ninput=10\n2 9 3 3 3 2 1 4 1 1\noutput=\"5\n1 3\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "solver.c.txt",
      "contents": "#include <stdio.h>\n#include <stdlib.h>     /* qsort */\n\nint compare (const void * a, const void * b){\n  return ( *(int*)a - *(int*)b );\n}\n\n\nint count(int vet[], size_t size, int value){\n    int qtd = 0;\n    for(size_t i = 0; i < size; i++)\n        if(vet[i] == value)\n            qtd++;\n    return qtd;\n}\n\nint find(int vet[], size_t size, int value){\n    for(size_t i = 0; i < size; i++)\n        if(vet[i] == value)\n            return i;\n    return -1;\n}\n\nint main(){\n    int size;\n    scanf(\"%d\", &size);\n    int vet[size];\n    for(size_t i = 0; i < size; i++){\n        scanf(\"%d\", vet + i);\n    }\n    int cont = 0;\n    for(size_t i = 0; i < size; i++){\n        if(find(vet, i, vet[i]) == -1)\n            cont++;\n    }\n    printf(\"%d\\n\", cont);\n    int vmax[size];\n    int vmax_size = 0;\n    int maxrep = 0;\n\n    for(size_t i = 0; i < size; i++){\n        int cont = count(vet, size, vet[i]);\n        if(cont > maxrep){\n            maxrep = cont;\n            vmax_size = 0;\n            vmax[vmax_size++]=vet[i];\n        }else if(cont == maxrep){\n            if(find(vmax, vmax_size, vet[i]) == -1){\n                vmax[vmax_size++] = vet[i];\n            }\n        }\n    }\n    qsort(vmax, vmax_size, sizeof(int), compare);\n    printf(\"%d\", vmax[0]);\n    for(size_t i = 1; i < vmax_size; i++)\n        printf(\" %d\", vmax[i]);\n    puts(\"\");\n    \n}"
    }
  ],
  "requiredFile": null
}