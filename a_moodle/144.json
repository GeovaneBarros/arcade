{
  "name": "@144 #10_ptr L2 - Fun\u00e7\u00e3o que retorna v\u00e1rios valores por refer\u00eancia",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@144 #10_ptr L2 - Fun\u00e7\u00e3o que retorna v\u00e1rios valores por refer\u00eancia</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <style>\npre > code.sourceCode { white-space: pre; position: relative; }\npre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\npre > code.sourceCode > span:empty { height: 1.2em; }\ncode.sourceCode > span { color: inherit; text-decoration: inherit; }\ndiv.sourceCode { margin: 1em 0; }\npre.sourceCode { margin: 0; }\n@media screen {\ndiv.sourceCode { overflow: auto; }\n}\n@media print {\npre > code.sourceCode { white-space: pre-wrap; }\npre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n}\npre.numberSource code\n  { counter-reset: source-line 0; }\npre.numberSource code > span\n  { position: relative; left: -4em; counter-increment: source-line; }\npre.numberSource code > span > a:first-child::before\n  { content: counter(source-line);\n    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n    border: none; display: inline-block;\n    -webkit-touch-callout: none; -webkit-user-select: none;\n    -khtml-user-select: none; -moz-user-select: none;\n    -ms-user-select: none; user-select: none;\n    padding: 0 4px; width: 4em;\n    color: #aaaaaa;\n  }\npre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\ndiv.sourceCode\n  {   }\n@media screen {\npre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n}\ncode span.al { color: #ff0000; font-weight: bold; } /* Alert */\ncode span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\ncode span.at { color: #7d9029; } /* Attribute */\ncode span.bn { color: #40a070; } /* BaseN */\ncode span.bu { } /* BuiltIn */\ncode span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\ncode span.ch { color: #4070a0; } /* Char */\ncode span.cn { color: #880000; } /* Constant */\ncode span.co { color: #60a0b0; font-style: italic; } /* Comment */\ncode span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\ncode span.do { color: #ba2121; font-style: italic; } /* Documentation */\ncode span.dt { color: #902000; } /* DataType */\ncode span.dv { color: #40a070; } /* DecVal */\ncode span.er { color: #ff0000; font-weight: bold; } /* Error */\ncode span.ex { } /* Extension */\ncode span.fl { color: #40a070; } /* Float */\ncode span.fu { color: #06287e; } /* Function */\ncode span.im { } /* Import */\ncode span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\ncode span.kw { color: #007020; font-weight: bold; } /* Keyword */\ncode span.op { color: #666666; } /* Operator */\ncode span.ot { color: #007020; } /* Other */\ncode span.pp { color: #bc7a00; } /* Preprocessor */\ncode span.sc { color: #4070a0; } /* SpecialChar */\ncode span.ss { color: #bb6688; } /* SpecialString */\ncode span.st { color: #4070a0; } /* String */\ncode span.va { color: #19177c; } /* Variable */\ncode span.vs { color: #4070a0; } /* VerbatimString */\ncode span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"ptr-l2---fun\u00e7\u00e3o-que-retorna-v\u00e1rios-valores-por-refer\u00eancia\"><span class=\"citation\" data-cites=\"144\">@144</span> #10_ptr L2 - Fun\u00e7\u00e3o que retorna v\u00e1rios valores por refer\u00eancia</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<p><img src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/144/__capa.jpg\" /></p>\n<h2 id=\"motiva\u00e7\u00e3o\">Motiva\u00e7\u00e3o</h2>\n<p>Quando precisamos que uma fun\u00e7\u00e3o retorne v\u00e1rios valores, temos duas op\u00e7\u00f5es: 1) Retornar uma estrutura, onde cada campo armazena um valor que desejamos retornar na fun\u00e7\u00e3o; ou 2) Passar vari\u00e1veis por refer\u00eancia, que receber\u00e3o os valores que desejamos retornar.</p>\n<p>Neste exemplo vamos considerar o 2o caso (passar resultados por refer\u00eancia). Implemente a fun\u00e7\u00e3o \u2018converte_tempo\u2019, que recebe o tempo em segundos e retorna em 3 vari\u00e1veis passadas por refer\u00eancia este tempo convertido em horas, minutos e segundos.</p>\n<p>O arquivo de envio j\u00e1 ter\u00e1 parte do c\u00f3digo preenchido, veja abaixo:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"pp\">#include </span><span class=\"im\">&lt;stdio.h&gt;</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a><span class=\"co\">// Recebe tempo em &#39;segundos&#39;, converte para horas, minutos e seguntos, e </span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\"></a><span class=\"co\">// retorna o resultado atrav\u00e9s dos par\u00e2metros &#39;hor&#39;, &#39;min&#39; e &#39;seg&#39;.</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\"></a><span class=\"dt\">void</span> converte_tempo(<span class=\"dt\">int</span> segundos, <span class=\"dt\">int</span> *hor, <span class=\"dt\">int</span> *min, <span class=\"dt\">int</span> *seg){</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\"></a></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\"></a>}</span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\"></a></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\"></a><span class=\"dt\">int</span> main(){</span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\"></a>   <span class=\"dt\">int</span> tempo, h, m, s;</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\"></a>   scanf(<span class=\"st\">&quot;%d&quot;</span>, &amp;tempo);</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\"></a></span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\"></a>   <span class=\"co\">// Chame a fun\u00e7\u00e3o &#39;converte_tempo&#39; para converter o valor de &#39;tempo&#39; em horas</span></span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\"></a>   <span class=\"co\">// minutos e segundos, gravando o resultado nas vari\u00e1veis &#39;h&#39;, &#39;m&#39; e &#39;s&#39;.</span></span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\"></a></span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\"></a></span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\"></a>   printf(<span class=\"st\">&quot;%d:%d:%d&quot;</span>, h, m, s);</span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\"></a>}</span></code></pre></div>\n<h2 id=\"a\u00e7\u00e3o\">A\u00e7\u00e3o</h2>\n<p>Voc\u00ea dever\u00e1: - Implementar a fun\u00e7\u00e3o \u2018converte_tempo\u2019. - Chamar a fun\u00e7\u00e3o \u2018converte_tempo\u2019 dentro da fun\u00e7\u00e3o \u2018main\u2019.</p>\n<h2 id=\"exemplos\">Exemplos</h2>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n7384\n========\n2:3:4\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n3601\n========\n1:0:1\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n60\n========\n0:1:0\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code></pre>\n<h1 id=\"section\"></h1>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=01\ninput=7384\noutput=\"2:3:4\n\"\ngrade reduction=100%\n\n\ncase=02\ninput=3601\noutput=\"1:0:1\n\"\ngrade reduction=100%\n\n\ncase=03\ninput=60\noutput=\"0:1:0\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "solver.c.txt",
      "contents": "#include <stdio.h>\n\n// Recebe tempo em 'segundos', converte para horas, minutos e seguntos, e \n// retorna o resultado atrav\u00e9s dos par\u00e2metros 'hor', 'min' e 'seg'.\nvoid converte_tempo(int segundos, int *hor, int *min, int *seg)\n{\n   *hor = segundos / 3600;\n   segundos = segundos % 3600;\n   *min = segundos / 60;\n   *seg = segundos % 60;\n}\n\nint main()\n{\n   int tempo, h, m, s;\n   scanf(\"%d\", &tempo);\n   \n   // Chame a fun\u00e7\u00e3o 'converte_tempo' para converter o valor de 'tempo' em horas\n   // minutos e segundos, gravando o resultado nas vari\u00e1veis 'h', 'm' e 's'.\n   converte_tempo(tempo, &h, &m, &s);\n   \n   printf(\"%d:%d:%d\\n\", h, m, s);\n}\n"
    }
  ],
  "requiredFile": null
}