{
  "name": "@084 #04_vet L3 - Zoologico Um animal de cada tipo!",
  "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@084 #04_vet L3 - Zoologico Um animal de cada tipo\\!</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"vet-l3---zoologico-um-animal-de-cada-tipo\">#04_vet L3 - Zoologico Um animal de cada tipo!</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<p><img src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/084/__capa.jpg\" /></p>\n<h2 id=\"motiva\u00e7\u00e3o\">Motiva\u00e7\u00e3o</h2>\n<p>O dono do zoologico quer a lista de todas as especies de animais<br />\nque existem no zoologico. Para isso ele te deu uma lista de todos<br />\nos animais. Ele quer que voc\u00ea fa\u00e7a um programa que retorne uma<br />\nnova lista contendo apenas um animal de cada especie.<br />\nConsidere que um n\u00famero representa uma especie.<br />\nDevolva um novo vetor, sem n\u00fameros repetidos e ordenado.</p>\n<p>N\u00e3o use uma fun\u00e7\u00e3o de ordenar pronta.</p>\n<p>[DS]</p>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>linha 1: um n\u00famero com a quantidade de elementos do vetor</li>\n<li>linha 2: o vetor de inteiros</li>\n</ul>\n<h3 id=\"sa\u00edda\">Sa\u00edda</h3>\n<ul>\n<li>O novo vetor ordenado contendo um exemplar de cada elemento.</li>\n</ul>\n<h2 id=\"exemplos\">Exemplos</h2>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n3\n1 1 2\n========\n1 2\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n5\n1 3 2 2 3\n========\n1 2 3\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n8\n1 9 3 3 3 2 1 4\n========\n1 2 3 4 9\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code></pre>\n<h1 id=\"section\"></h1>\n</body>\n</html>\n",
  "executionFiles": [
    {
      "name": "vpl_evaluate.cases",
      "contents": "case=00\ninput=3\n1 1 2\noutput=\"1 2\n\"\ngrade reduction=100%\n\n\ncase=01\ninput=5\n1 3 2 2 3\noutput=\"1 2 3\n\"\ngrade reduction=100%\n\n\ncase=02\ninput=8\n1 9 3 3 3 2 1 4\noutput=\"1 2 3 4 9\n\"\ngrade reduction=100%\n"
    },
    {
      "name": "solver.py.txt",
      "contents": "num = int(input())\nslista = input().split(\" \")\n\nlista = []\nfor x in slista:\n    lista.append(int(x))\n\nolista = sorted(lista)\nlista = olista\ndifer = []\ndifer.append(lista[0])\nfor x in range(1, num):\n    if lista[x] != lista[x - 1]:\n        difer.append(lista[x])\n\nfor x in difer:\n    print (x, end = \"\")\n    if(x != difer[len(difer) - 1]):\n        print(\" \", end = \"\")\nprint()"
    },
    {
      "name": "solver.c.txt",
      "contents": "#include <stdio.h>\nint main(){\n    int size = 0;\n    scanf(\"%d\", &size);\n    int vet[size];\n    int sizeAux = size;\n    for(int i = 0; i < size; i++){\n        scanf(\"%d\", &vet[i]);\n    }\n    for(int x = 0; x < size; x++){\n        for(int y = x + 1; y < size;y++){\n            if(vet[x] == vet[y]){\n               vet[x] = 999;\n               sizeAux--;\n            }\n            \n        }\n    }\n    for(int x = 0; x < size; x++){\n        for(int y = x + 1; y < size;y++){\n            if(vet[x] > vet[y]){\n                int aux = vet[x];\n                vet[x] = vet[y];\n                vet[y] = aux;\n            }\n        }\n    }\n    for(int i = 0; i < sizeAux; i++){\n        printf(\"%d\", vet[i]);\n        if(i < sizeAux - 1)\n            printf(\" \");\n    }\n    puts(\"\");\n}"
    },
    {
      "name": "solver.cpp.txt",
      "contents": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint pegar_posicao(vector<int> vet, int elem){\n    for(int i = 0; i < (int) vet.size(); i++)\n        if(vet[i] == elem)\n            return i;\n    return -1;\n}\n\nvector<int> pegar_exemplares(vector<int> vet){\n    vector<int> sozinhos;\n    for(int i = 0; i < (int)vet.size(); i++){\n        if(i == pegar_posicao(vet, vet[i]))\n            sozinhos.push_back(vet[i]);\n    }\n    sort(sozinhos.begin(), sozinhos.end());\n    return sozinhos;\n}\n\nvector<int> carregar_vetor(int num){\n    vector<int> vet;\n    vet.reserve(num);\n    for( int i = 0; i < num; i++){\n        int valor;\n        cin >> valor;\n        vet.push_back(valor);\n    }\n    return vet;\n}\n\nint main (){\n    int qtd;\n    cin >> qtd;\n    vector<int> vet = carregar_vetor(qtd);\n    vector<int> resp = pegar_exemplares(vet);\n    for(int i = 0; i < (int)resp.size(); i++){\n        cout << resp[i];\n        if(i < (int)resp.size() - 1)\n            cout << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n"
    }
  ],
  "requiredFile": null
}